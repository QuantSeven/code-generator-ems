<#include "common.ftl">
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Dao接口 -->
<mapper namespace="${dao_package}.${className}Dao">
	<resultMap id="${className}ResultMap" type="${model_package}.${className}">
		<#list table.primaryKeyColumns as pkColumn>
		<id property="${pkColumn.columnNameLowerCase}" column="${pkColumn}" />
		</#list><#list table.columns as column><#if !column.pk>
		<result property="${column.columnNameLowerCase}" column="${column}" />
		</#if>
		</#list>
		<#list table.childrens as child>
		<association property="${child.classNameLowerCase}" javaType="${child.templateModel.modelPackage}.${child.className}">
			<#list child.primaryKeyColumns as pkColumn>
			<id property="${pkColumn.columnNameLowerCase}" column="${pkColumn}" />
			</#list><#list child.columns as column><#if !column.pk>
			<result property="${column.columnNameLowerCase}" column="${column}" />
			</#if>
			</#list>
		</association>
		</#list>
	</resultMap>

	<!-- 定义可重用的SQL代码段，可以包含在其他语句中 -->
	<sql id="base_column">
		 <#list table.columns as column><#if column_index==0>alias${className}.${column}<#else>
		 ,alias${className}.${column}</#if></#list>
		 <#list table.childrens as child>
		 <#list child.columns as column><#if child.relationColumn.sqlName != column>
		 ,alias${child.className}.${column}
		 </#if>
		 </#list>
		 </#list>
	</sql>
	
	<!-- 定义可重用的WHERE SQL公共代码段，可以包含在其他语句中 -->
	<sql id="where_column">
		<#list table.columns as column>
		<if test="${column.columnNameLowerCase} != null and ${column.columnNameLowerCase} != ''">
			AND alias${className}.${column} = <#noparse>#{</#noparse>${column.columnNameLowerCase},jdbcType=${column.sqlTypeName}<#noparse>}</#noparse>
		</if>
		</#list>
		<#list table.childrens as child>
		<#list child.columns as column>
		<if test="${column.columnNameLowerCase} != null and ${column.columnNameLowerCase} != ''">
			AND alias${child.className}.${column} = <#noparse>#{</#noparse>${column.columnNameLowerCase},jdbcType=${column.sqlTypeName}<#noparse>}</#noparse>
		</if>
		</#list>
		</#list>
	</sql>
	
	<select id="find" resultMap="${className}ResultMap">
	
		SELECT	<include refid="base_column" />
		FROM	${table.tableName} alias${className}
		<#list table.childrens as child>
		LEFT OUTER JOIN ${child.tableName} alias${child.className} ON alias${child.className}.${child.relationColumn.sqlName} = alias${className}.${child.parentRelationColumn.sqlName}
		</#list>
		WHERE	alias${className}.${pk}=<#noparse>#{</#noparse>${pk.columnNameLowerCase},jdbcType=${pk.sqlTypeName}<#noparse>}</#noparse>
	
	</select>
	
	<select id="findByPk" resultMap="${className}ResultMap">
	
		SELECT	<include refid="base_column" />
		FROM	${table.tableName} alias${className}
		<#list table.childrens as child>
		LEFT OUTER JOIN ${child.tableName} alias${child.className} ON alias${child.className}.${child.relationColumn.sqlName} = alias${className}.${child.parentRelationColumn.sqlName}
		</#list>
		WHERE	<#list table.primaryKeyColumns as pkColumn>alias${className}.${pkColumn}=<#noparse>#{</#noparse>${pkColumn.columnNameLowerCase},jdbcType=${pkColumn.sqlTypeName}<#noparse>}</#noparse>
		  <#if pkColumn_has_next>AND	</#if></#list>
	</select>

	<select id="findByPage" resultMap="${className}ResultMap">
	
		SELECT	<include refid="base_column" />
		FROM	${table.tableName} alias${className}
		<#list table.childrens as child>
		LEFT OUTER JOIN ${child.tableName} alias${child.className} ON alias${child.className}.${child.relationColumn.sqlName} = alias${className}.${child.parentRelationColumn.sqlName}
		</#list>
		<where>
			<include refid="where_column" />
		</where>
		
	</select>
	
	<insert id="insert" parameterType="${model_package}.${className}">
	
		INSERT INTO ${table.tableName}
				(<#list table.columns as column><#if column_index == 0>${column}<#else>,${column}</#if>
				</#list>)
		VALUES	(<#list table.columns as column><#if column_index == 0><#noparse>#{</#noparse>${column.columnNameLowerCase},jdbcType=${column.sqlTypeName}}<#else>,<#noparse>#{</#noparse>${column.columnNameLowerCase}}</#if>
				</#list>)
				
	</insert>
	
	<update id="update" parameterType="${model_package}.${className}">
	
		UPDATE	${table.tableName}
		<set>
			<#list table.columns as column>
			<if test="${column.columnNameLowerCase} != null and ${column.columnNameLowerCase} != ''">
				${column} = <#noparse>#{</#noparse>${column.columnNameLowerCase},jdbcType=${column.sqlTypeName}},
			</if>
			</#list>
		</set>
		WHERE	<#list table.primaryKeyColumns as pkColumn>${pkColumn} = <#noparse>#{</#noparse>${pkColumn.columnNameLowerCase},jdbcType=${pkColumn.sqlTypeName}<#noparse>}</#noparse>
		  <#if pkColumn_has_next>AND	</#if></#list>
	</update>
	
	<delete id="deleteByPk">
	
		DELETE	FROM ${table.tableName}
		WHERE	<#list table.primaryKeyColumns as pkColumn>${pkColumn} = <#noparse>#{</#noparse>${pkColumn.columnNameLowerCase},jdbcType=${pkColumn.sqlTypeName}<#noparse>}</#noparse>
		  <#if pkColumn_has_next>AND	</#if></#list>
	</delete>
	
	<delete id="delete">
	
		DELETE	FROM ${table.tableName}
		WHERE	${pk}
		   IN
    	<foreach item="${classNameLowerCase}Id" index="index" collection="array" open="(" separator="," close=")">
	  		<#noparse>#{</#noparse>${classNameLowerCase}Id<#noparse>}</#noparse> 
		</foreach>
		  
	</delete>
	<#if table.isSubTable>
	<delete id="deleteBy${table.relationColumn.columnName}">
	
		DELETE	FROM ${table.tableName}
		WHERE	${table.relationColumn.sqlName} = <#noparse>#{</#noparse>${table.relationColumn.columnNameLowerCase},jdbcType=${table.relationColumn.sqlTypeName}<#noparse>}</#noparse>
		  
	</delete>
	
	</#if>
</mapper> 
